#include <iostream>

using namespace std;

class Flamingo {
private:
    int greutate;
    static int regiune;
    const string clasa;
    int* specimene;
    string specimen;

public:
    Flamingo() : greutate(20), specimen("Ionel") {
        this->specimene = new int[this->greutate];
        for (int i = 0; i < this->greutate; i++) {
            this->specimene[i] = 100 + i;
        }
    }

    Flamingo(int greutate, string specimen) : greutate(greutate), specimen(specimen) {
        this->specimene = new int[this->greutate];
        for (int i = 0; i < this->greutate; i++) {
            this->specimene[i] = 200 + i;
        }
    }

    Flamingo(int greutate, string clasa, string specimen, int* specimene) :
        greutate(greutate), clasa(clasa), specimen(specimen) {
        this->specimene = new int[this->greutate];
        for (int i = 0; i < this->greutate; i++) {
            this->specimene[i] = specimene[i];
        }
    }

    ~Flamingo() {
        delete[]this->specimene;
    }

    void setGreutate(int greutate) {
        this->greutate = greutate;
    }

    int getGreutate() const {
        return greutate;
    }

    static void setRegiune(int valoare) {
        regiune = valoare;
    }

    static int getRegiune() {
        return regiune;
    }

    Flamingo& operator=(const Flamingo& other) {
        if (this != &other) {
            greutate = other.greutate;
            delete[] specimene;
            specimene = new int[greutate];
            for (int i = 0; i < greutate; i++) {
                specimene[i] = other.specimene[i];
            }
            specimen = other.specimen;
        }
        return *this;
    }

    bool operator==(const Flamingo& other) const {
        return greutate == other.greutate && specimen == other.specimen;
    }

    Flamingo operator*(int factor) const {
        Flamingo result(*this);
        for (int i = 0; i < greutate; i++) {
            result.specimene[i] *= factor;
        }
        return result;
    }

    int& operator[](int index) {
        if (index >= 0 && index < greutate) {
            return specimene[index];
        }
        throw out_of_range("Index invalid");
    }

    void afisare() const {
        cout << "Greutate: " << this->greutate << "\nRegiune: " << this->regiune << "\nClasa: " << this->clasa
            << "\nSpecimen: " << this->specimen << "\nSpecimene: ";
        for (int i = 0; i < this->greutate - 1; i++) {
            cout << this->specimene[i] << ", ";
        }
        cout << this->specimene[this->greutate - 1] << endl;
    }
};

int Flamingo::regiune = 1;

class NouaClasa {
private:
    string nume;
    int varsta;
    Flamingo flamingoObj; 

public:
    NouaClasa() : nume("Noua Clasa"), varsta(0) {}

    NouaClasa(string nume, int varsta, const Flamingo& flamingoObj) :
        nume(nume), varsta(varsta), flamingoObj(flamingoObj) {}

   
    void setNume(string nume) {
        this->nume = nume;
    }

    string getNume() const {
        return nume;
    }

    void setVarsta(int varsta) {
        this->varsta = varsta;
    }

    int getVarsta() const {
        return varsta;
    }

    void setFlamingoObj(const Flamingo& flamingoObj) {
        this->flamingoObj = flamingoObj;
    }

    Flamingo getFlamingoObj() const {
        return flamingoObj;
    }

    // Operatori la alegere
    NouaClasa operator+(const NouaClasa& other) const {
        NouaClasa result(*this);
        result.varsta += other.varsta;
        return result;
    }

    bool operator!=(const NouaClasa& other) const {
        return varsta != other.varsta || nume != other.nume ;
    }

    NouaClasa& operator++() {
        varsta++;
        return *this;
    }

    // Afisare
    void afisare() const {
        cout << "Nume: " << nume << "\nVarsta: " << varsta << "\nFlamingo: ";
        flamingoObj.afisare();
    }
};


class SanctuarFlamingo {
private:
    string nume;
    static string pretBilet;
    const int anInfiintare = 2005;
    int* varste;

public:
    SanctuarFlamingo() : nume("Sanctuarul Flamingo") {
        this->varste = new int[10];
        for (int i = 0; i < 10; i++) {
            this->varste[i] = 5 + i;
        }
    }

    SanctuarFlamingo(string nume) : nume(nume) {
        this->varste = new int[10];
        for (int i = 0; i < 10; i++) {
            this->varste[i] = 10 + i;
        }
    }

    ~SanctuarFlamingo() {
        delete[]this->varste;
    }

    void setNume(string nume) {
        this->nume = nume;
    }

    string getNume() const {
        return nume;
    }

    static void setPretBilet(string pret) {
        pretBilet = pret;
    }

    static string getPretBilet() {
        return pretBilet;
    }

    SanctuarFlamingo& operator=(const SanctuarFlamingo& other) {
        if (this != &other) {
            nume = other.nume;
            delete[] varste;
            varste = new int[10];
            for (int i = 0; i < 10; i++) {
                varste[i] = other.varste[i];
            }
        }
        return *this;
    }

    bool operator==(const SanctuarFlamingo& other) const {
        return nume == other.nume;
    }

    SanctuarFlamingo operator*(int factor) const {
        SanctuarFlamingo result(*this);
        for (int i = 0; i < 10; i++) {
            result.varste[i] *= factor;
        }
        return result;
    }

    int& operator[](int index) {
        if (index >= 0 && index < 10) {
            return varste[index];
        }
        throw out_of_range("Index invalid");
    }

    void afisare() const {
        cout << "Nume Sanctuar: " << this->nume << "\nPret Bilet: " << this->pretBilet << "\nAn Infiintare: "
            << this->anInfiintare << "\nVarste Păsări: ";
        for (int i = 0; i < 9; i++) {
            cout << this->varste[i] << ", ";
        }
        cout << this->varste[9] << endl;
    }
};

string SanctuarFlamingo::pretBilet = "15 RON";

class FlamencoRoz {
private:
    string nume;
    static string zona;
    const string specie = "Phoenicopteridae";
    int* varsta;

public:
    FlamencoRoz() : nume("Flamenco Roz") {
        this->varsta = new int[8];
        for (int i = 0; i < 8; i++) {
            this->varsta[i] = 2 + i;
        }
    }

    FlamencoRoz(string nume, string zona) : nume(nume) {
        this->varsta = new int[8];
        for (int i = 0; i < 8; i++) {
            this->varsta[i] = 5 + i;
        }
    }

    ~FlamencoRoz() {
        delete[]this->varsta;
    }

    void setNume(string nume) {
        this->nume = nume;
    }

    string getNume() const {
        return nume;
    }

    static void setZona(string newZona) {
        zona = newZona;
    }

    static string getZona() {
        return zona;
    }

    FlamencoRoz& operator=(const FlamencoRoz& other) {
        if (this != &other) {
            nume = other.nume;
            delete[] varsta;
            varsta = new int[8];
            for (int i = 0; i < 8; i++) {
                varsta[i] = other.varsta[i];
            }
        }
        return *this;
    }

    bool operator==(const FlamencoRoz& other) const {
        return nume == other.nume;
    }

    FlamencoRoz operator*(int factor) const {
        FlamencoRoz result(*this);
        for (int i = 0; i < 8; i++) {
            result.varsta[i] *= factor;
        }
        return result;
    }

    int& operator[](int index) {
        if (index >= 0 && index < 8) {
            return varsta[index];
        }
        throw out_of_range("Index invalid");
    }

    void afisare() const {
        cout << "Nume: " << this->nume << "\nZona de Origine: " << this->zona << "\nSpecie: " << this->specie
            << "\nVarsta: ";
        for (int i = 0; i < 7; i++) {
            cout << this->varsta[i] << ", ";
        }
        cout << this->varsta[7] << endl;
    }
};

string FlamencoRoz::zona = "America Centrală";

int main() {
    Flamingo f1;
    Flamingo::setRegiune(2);
    Flamingo f2(24, "Ancuta");

    SanctuarFlamingo sanctuar1;
    SanctuarFlamingo::setPretBilet("25 RON");

    FlamencoRoz flamenco1;
    FlamencoRoz::setZona("America de Sud");
    FlamencoRoz flamenco2("Flamenco Argintiu", "America de Nord");

    f1.afisare();
    f2.afisare();
    sanctuar1.afisare();
    flamenco1.afisare();
    flamenco2.afisare();

    Flamingo f3;
    f3 = f1;
    if (f1 == f2) {
        cout << "f1 este egal cu f2\n";
    }
    else {
        cout << "f1 nu este egal cu f2\n";
    }

    Flamingo f4 = f1 * 2;
    cout << "f4 = f1 * 2: ";
    f4.afisare();

    f1[2] = 999;
    cout << "f1 dupa modificarea elementului 2: ";
    f1.afisare();

    SanctuarFlamingo sanctuar2;
    sanctuar2 = sanctuar1;
    if (sanctuar1 == sanctuar2) {
        cout << "Sanctuarurile sunt identice\n";
    }

    FlamencoRoz flamenco3;
    flamenco3 = flamenco2;
    FlamencoRoz flamenco4 = flamenco2 * 3;
    cout << "flamenco4 = flamenco2 * 3: ";
    flamenco4.afisare();

    flamenco2[1] = 777;
    cout << "flamenco2 dupa modificarea elementului 1: ";
    flamenco2.afisare();
    Flamingo flamingoExemplu;
    NouaClasa nouaObiect("ObiectNou", 25, flamingoExemplu);

    NouaClasa obiectAdunat = nouaObiect + NouaClasa("ObiectAdunat", 30, flamingoExemplu);
    cout << "Afisare obiect adunat:\n";
    obiectAdunat.afisare();

    cout << "\nVerificare != operator:\n";
    if (nouaObiect != obiectAdunat) {
        cout << "Obiectele sunt diferite.\n";
    }
    else {
        cout << "Obiectele sunt identice.\n";
    }

    cout << "\nOperator ++varsta:\n";
    ++nouaObiect;
    nouaObiect.afisare();

    return 0;
}
  
