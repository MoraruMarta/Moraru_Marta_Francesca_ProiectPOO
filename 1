#include <iostream>
using namespace std;

class Animale {
private:
    string specie;
    int numar;
    static int tarc;
    const int id_contabilitate;
    int* varsta;
public:
 string getSpecie() {
        return this->specie;
    }

    void setSpecie(string specie) {
        if (specie.length() > 3) {
            this->specie = specie;
        }
    }
    Animale() : id_contabilitate(4277) {
        this->specie = "Gaina";
        this->numar = 3;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = 1 + i;
        }
    }

    Animale(string specie, int numar, const int id_contabilitate, int* varsta) : id_contabilitate(4279) {
        this->specie = specie;
        this->numar = numar;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = varsta[i];
        }
    }
     Animale(const Animale &animale) : id_contabilitate(animale.id_contabilitate) {
        this->specie = animale.specie;
        this->numar = animale.numar;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = animale.varsta[i];
        }
    }

    ~Animale() {
        if (this->varsta != NULL) {
            delete[] this->varsta;
            this->varsta = NULL;
        }
    }

    void Afisare_animale() {
        cout << "Specie: " << this->specie << "\nNumar: " << this->numar << "\nTarc: " << this->tarc << "\nId contabilitate: " << this->id_contabilitate << "\nVarsta: ";
        for (int i = 0; i < this->numar - 1; i++) {
            cout << this->varsta[i] << " , ";
        }
        cout << this->varsta[this->numar - 1] << endl;
    }

    static float calculeazaMediaVarstelor(const Animale& animale) {
        int sumaVarstelor = 0;
        for (int i = 0; i < animale.numar; i++) {
            sumaVarstelor += animale.varsta[i];
        }
        return static_cast<float>(sumaVarstelor) / animale.numar;
    }
    friend void prelucrareAnimale(const Animale& animale);
};

int Animale::tarc = 3;

class Utilaje {
private:
    string nume;
    int nr_kilometri;
    static string marca;
    const int capacitate_motor;
    int* pieseSchimb;
public:
 string getNume() {
        return this->nume;
    }

    void setNume(string nume) {
        if (nume.length() > 1) {
            this->nume = nume;
        }
    }
    Utilaje() : capacitate_motor(44) {
        this->nume = "Tractor";
        this->nr_kilometri = 4;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = 1 + i;
        }
    }

    Utilaje(string nume, int nr_kilometri, const int capacitate_motor, int* pieseSchimb) : capacitate_motor(98) {
        this->nume = nume;
        this->nr_kilometri = nr_kilometri;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = pieseSchimb[i];
        }
    }
     Utilaje(const Utilaje &utilaje) : capacitate_motor(utilaje.capacitate_motor) {
        this->nume = utilaje.nume;
        this->nr_kilometri = utilaje.nr_kilometri;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = utilaje.pieseSchimb[i];
        }
    }


    ~Utilaje() {
        if (this->pieseSchimb != NULL) {
            delete[] this->pieseSchimb;
            this->pieseSchimb = NULL;
        }
    }

    void Afisare_utilaje() {
        cout << "Nume: " << this->nume << "\nNumar kilometri: " << this->nr_kilometri << "\nMarca: " << this->marca << "\nCapacitate motor: " << this->capacitate_motor << "\nKilometri parcursi pe luna: ";
        for (int i = 0; i < this->nr_kilometri -1 ; i++) {
            cout << this->pieseSchimb[i] << ", ";
        }

        cout << this->pieseSchimb[this->nr_kilometri - 1] << endl;
    }

    static int Minimpiese(const Utilaje& utilaj) {
        return utilaj.pieseSchimb[0];
    }
       friend void prelucrareUtilaje(const Utilaje& utilaje);
};

string Utilaje::marca = "Utilitas";

class Terenuri {
private:
string teren;
    int numar_teren;
    int pretEvaluat;
    static int kilometri;
    const string localitate;
    int* pretInitial;
public:
 string getTerenuri() {
        return this->teren;
    }

    void setTerem() {
        if (teren.length() > 3) {
            this->teren= teren;
        }
    }
    Terenuri() : localitate("Urlati") {
        this->numar_teren = 1;
        this->pretEvaluat = 2;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = 1 + i;
        }
    }

    Terenuri(int numar_teren, int pretEvaluat, const string localitate, int* pretInitial) : localitate("Satu Nou") {
        this->numar_teren = numar_teren;
        this->pretEvaluat = pretEvaluat;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = pretInitial[i];
        }
    }
 Terenuri(const Terenuri &terenuri) : localitate(terenuri.localitate) {
        this->numar_teren = terenuri.numar_teren;
        this->pretEvaluat = terenuri.pretEvaluat;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = terenuri.pretInitial[i];
        }
    }

    ~Terenuri() {
        if (this->pretInitial != NULL) {
            delete[] this->pretInitial;
            this->pretInitial = NULL;
        }
    }

    void afisare_terenuri() {
        cout << "Numarul terenului: " << this->numar_teren << "\nPret evaluat: " << this->pretEvaluat << "\nKilometri: " << this->kilometri << "\nLocalitate: " << this->localitate << "\nPret initial: ";
        for (int i = 0; i < this->pretEvaluat -2; i++) {
            cout << this->pretInitial[i] << " , ";
        }
        cout << this->pretInitial[this->pretEvaluat - 1] << endl;
    }

    static void setKilometri(int Kilometrinoi) {
        kilometri = Kilometrinoi;
    }
      friend void prelucrareTerenuri(const Terenuri& terenuri);


};
void prelucrareAnimale(const Animale& animale) {
   
    cout << "Animale: " << animale.specie << ", " << animale.numar << endl;
}


void prelucrareUtilaje(const Utilaje& utilaje) {
 
    cout << " Utilaje: " << utilaje.nume << ", " << utilaje.nr_kilometri << endl;
}
void prelucrareTerenuri(const Terenuri& terenuri) {
    cout << "Terenuri" << terenuri.numar_teren << " , " << terenuri.pretEvaluat << endl;
}

int Terenuri::kilometri = 25;

void main() {
 
    Animale a1;
     prelucrareAnimale(a1);
    Animale a2("Porci", 2, 1234, new int[2] {5, 7});

  
    Utilaje u1;
prelucrareUtilaje(u1);

    Utilaje u2("Combinezon", 2, 6, new int[3] {18, 19, 20});

   
    Terenuri t1;
        prelucrareTerenuri(t1);

    Terenuri t2(2, 2, "Brasov", new int[2] {15, 16});


    cout << "Animale :\n";
    a1.Afisare_animale();
    cout << "\nAnimale :\n";
    a2.Afisare_animale();

    cout << "\nUtilaje :\n";
    u1.Afisare_utilaje();
    cout << "\nUtilaje :\n";
    u2.Afisare_utilaje();

    cout << "\nTerenuri :\n";
    t1.afisare_terenuri();
    cout << "\nTerenuri :\n";
    t2.afisare_terenuri();
    
    cout << "\nMedia varstelor : " << Animale::calculeazaMediaVarstelor(a2);
    cout << "\nMini piese : " << Utilaje::Minimpiese(u1);

    
}


