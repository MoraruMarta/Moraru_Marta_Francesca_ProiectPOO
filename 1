#include <iostream>
using namespace std;

class Animale {
private:
    string specie;
    int numar;
    static int tarc;
    const int id_contabilitate;
    int* varsta;
public:
 string getSpecie() {
        return this->specie;
    }

    void setSpecie(string specie) {
        if (specie.length() > 3) {
            this->specie = specie;
        }
    }

    int getNumar() {
        return this->numar;
    }

    Animale() : id_contabilitate(4277) {
        this->specie = "Gaina";
        this->numar = 3;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = 1 + i;
        }
    }

    Animale(string specie, int numar, const int id_contabilitate, int* varsta) : id_contabilitate(4279) {
        this->specie = specie;
        this->numar = numar;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = varsta[i];
        }
    }
     Animale(const Animale &animale) : id_contabilitate(animale.id_contabilitate) {
        this->specie = animale.specie;
        this->numar = animale.numar;
        this->varsta = new int[this->numar];
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] = animale.varsta[i];
        }
    }

    ~Animale() {
        if (this->varsta != NULL) {
            delete[] this->varsta;
            this->varsta = NULL;
        }
    }

    void Afisare_animale() {
        cout << "Specie: " << this->specie << "\nNumar: " << this->numar << "\nTarc: " << this->tarc << "\nId contabilitate: " << this->id_contabilitate << "\nVarsta: ";
        for (int i = 0; i < this->numar - 1; i++) {
            cout << this->varsta[i] << " , ";
        }
        cout << this->varsta[this->numar - 1] << endl;
    }

    static float calculeazaMediaVarstelor(const Animale& animale) {
        int sumaVarstelor = 0;
        for (int i = 0; i < animale.numar; i++) {
            sumaVarstelor += animale.varsta[i];
        }
        return static_cast<float>(sumaVarstelor) / animale.numar;
    }
    friend void prelucrareAnimale(const Animale& animale);

    Animale& operator=(const Animale& animale) {
        if (this != &animale) {
            this->specie = animale.specie;
            this->numar = animale.numar;
            if (this->varsta != nullptr) {
                delete[] this->varsta;
            }
            this->varsta = new int[this->numar];
            for (int i = 0; i < this->numar; i++) {
                this->varsta[i] = animale.varsta[i];
            }
        }
        return *this;
    }

    Animale operator+(const Animale& animale) const {
        Animale rezultat = *this;
        for (int i = 0; i < this->numar; i++) {
            rezultat.varsta[i] += animale.varsta[i];
        }
        return rezultat;
    }

    Animale operator-(const Animale& animale) const {
        Animale rezultat = *this;
        for (int i = 0; i < this->numar; i++) {
            rezultat.varsta[i] -= animale.varsta[i];
        }
        return rezultat;
    }

    Animale operator*(int scalar) const {
        Animale rezultat = *this;
        for (int i = 0; i < this->numar; i++) {
            rezultat.varsta[i] *= scalar;
        }
        return rezultat;
    }

    Animale operator/(int divizor) const {
        if (divizor != 0) {
            Animale rezultat = *this;
            for (int i = 0; i < this->numar; i++) {
                rezultat.varsta[i] /= divizor;
            }
            return rezultat;
        }
        else {
            cerr << "Eroare" << endl;
            exit(EXIT_FAILURE);
        }
    }

    bool operator==(const Animale& animale) const {
        return this->numar == animale.numar;
    }

    bool operator!=(const Animale& animale) const {
        return this->numar != animale.numar;
    }

    Animale& operator++() {
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i]++;
        }
        return *this;
    }

    Animale operator++(int) {
        Animale temp = *this;
        ++(*this);
        return temp;
    }

    Animale& operator+=(const Animale& animale) {
        for (int i = 0; i < this->numar; i++) {
            this->varsta[i] += animale.varsta[i];
        }
        return *this;
    }

    friend ostream& operator<<(ostream& consola, const Animale& animale) {
        cout << "Specie: " << animale.specie << "\nNumar: " << animale.numar << "\nVarsta: ";
        for (int i = 0; i < animale.numar - 1; i++) {
            cout << animale.varsta[i] << " , ";
        }
        cout << animale.varsta[animale.numar - 1] << endl;
        return consola;
    }

    friend void afisareFriend(const Animale& animale);

      friend void afisareFriend(const Animale& animale);
    void scrieInFisierText(const string& numeFisier) const {
        ofstream fout(numeFisier);
        if (!fout.is_open()) {
            cerr << "Eroare la deschiderea fisierului text\n";
            return;
        }

        fout << "Specie: " << specie << "\nNumar: " << numar << "\nVarsta: ";
        for (int i = 0; i < numar - 1; i++) {
            fout << varsta[i] << " , ";
        }
        fout << varsta[numar - 1] << endl;

        fout.close();
    }


    void citesteDinFisierText(const string& numeFisier) {
        ifstream fin(numeFisier);
        if (!fin.is_open()) {
            cerr << "Eroare la deschiderea fisierului text\n";
            return;
        }

        fin.ignore(numeric_limits<streamsize>::max(), '\n'); 
        fin >> specie >> numar;
        delete[] varsta;
        varsta = new int[numar];
        for (int i = 0; i < numar; i++) {
            fin >> varsta[i];
        }

        fin.close();
    }

 
  
   
    void scrieInFisierBinar(const string& numeFisier) const {
        ofstream fout(numeFisier, ios::binary | ios::trunc);
        if (!fout.is_open()) {
            cerr << "Eroare la deschiderea fisierului binar\n";
            return;
        }

        fout.write(reinterpret_cast<const char*>(this), sizeof(*this));

        fout.close();
    }

   
    void citesteDinFisierBinar(const string& numeFisier) {
        ifstream fin(numeFisier, ios::binary);
        if (!fin.is_open()) {
            cerr << "Eroare la deschiderea fisierului binar\n";
            return;
        }

        fin.read(reinterpret_cast<char*>(this), sizeof(*this));

        fin.close();
    }
};

void afisareFriend(const Animale& animale) {
    cout << "Functie prietena pentru Animale: " << animale.specie << ", " << animale.numar << endl;
}


int Animale::tarc = 3;

class Utilaje {
private:
    string nume;
    int nr_kilometri;
    static string marca;
    const int capacitate_motor;
    int* pieseSchimb;
public:
 string getNume() {
        return this->nume;
    }
 int getNr_kilometri() {
     return this->nr_kilometri;
 }

    void setNume(string nume) {
        if (nume.length() > 1) {
            this->nume = nume;
        }
    }
    Utilaje() : capacitate_motor(44) {
        this->nume = "Tractor";
        this->nr_kilometri = 4;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = 1 + i;
        }
    }

    Utilaje(string nume, int nr_kilometri, const int capacitate_motor, int* pieseSchimb) : capacitate_motor(98) {
        this->nume = nume;
        this->nr_kilometri = nr_kilometri;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = pieseSchimb[i];
        }
    }
     Utilaje(const Utilaje &utilaje) : capacitate_motor(utilaje.capacitate_motor) {
        this->nume = utilaje.nume;
        this->nr_kilometri = utilaje.nr_kilometri;
        this->pieseSchimb = new int[this->nr_kilometri];
        for (int i = 0; i < this->nr_kilometri; i++) {
            this->pieseSchimb[i] = utilaje.pieseSchimb[i];
        }
    }


    ~Utilaje() {
        if (this->pieseSchimb != NULL) {
            delete[] this->pieseSchimb;
            this->pieseSchimb = NULL;
        }
    }

    void Afisare_utilaje() {
        cout << "Nume: " << this->nume << "\nNumar kilometri: " << this->nr_kilometri << "\nMarca: " << this->marca << "\nCapacitate motor: " << this->capacitate_motor << "\nKilometri parcursi pe luna: ";
        for (int i = 0; i < this->nr_kilometri -1 ; i++) {
            cout << this->pieseSchimb[i] << ", ";
        }

        cout << this->pieseSchimb[this->nr_kilometri - 1] << endl;
    }

    static int Minimpiese(const Utilaje& utilaj) {
        return utilaj.pieseSchimb[0];
    }
    friend void prelucrareUtilaje(const Utilaje& utilaje);

       Utilaje& operator=(const Utilaje& utilaje) {
           if (this != &utilaje) {
               this->nume = utilaje.nume;
               this->nr_kilometri = utilaje.nr_kilometri;
               if (this->pieseSchimb != nullptr) {
                   delete[] this->pieseSchimb;
               }
               this->pieseSchimb = new int[this->nr_kilometri];
               for (int i = 0; i < this->nr_kilometri; i++) {
                   this->pieseSchimb[i] = utilaje.pieseSchimb[i];
               }
           }
           return *this;
       }

       Utilaje operator+(const Utilaje& utilaje) const {
           Utilaje rezultat = *this;
           for (int i = 0; i < this->nr_kilometri; i++) {
               rezultat.pieseSchimb[i] += utilaje.pieseSchimb[i];
           }
           return rezultat;
       }

       Utilaje operator-(const Utilaje& utilaje) const {
           Utilaje rezultat = *this;
           for (int i = 0; i < this->nr_kilometri; i++) {
               rezultat.pieseSchimb[i] -= utilaje.pieseSchimb[i];
           }
           return rezultat;
       }

       Utilaje operator*(int scalar) const {
           Utilaje rezultat = *this;
           for (int i = 0; i < this->nr_kilometri; i++) {
               rezultat.pieseSchimb[i] *= scalar;
           }
           return rezultat;
       }

       Utilaje operator/(int divizor) const {
           if (divizor != 0) {
               Utilaje rezultat = *this;
               for (int i = 0; i < this->nr_kilometri; i++) {
                   rezultat.pieseSchimb[i] /= divizor;
               }
               return rezultat;
           }
           else {
               cerr << "Eroare" << endl;
               exit(EXIT_FAILURE);
           }
       }

       bool operator==(const Utilaje& utilaje) const {
           return this->nr_kilometri == utilaje.nr_kilometri;
       }

       bool operator!=(const Utilaje& utilaje) const {
           return this->nr_kilometri != utilaje.nr_kilometri;
       }

       Utilaje& operator++() {
           for (int i = 0; i < this->nr_kilometri; i++) {
               this->pieseSchimb[i]++;
           }
           return *this;
       }

       Utilaje operator++(int) {
           Utilaje temp = *this;
           ++(*this);
           return temp;
       }

       Utilaje& operator+=(const Utilaje& utilaje) {
           for (int i = 0; i < this->nr_kilometri; i++) {
               this->pieseSchimb[i] += utilaje.pieseSchimb[i];
           }
           return *this;
       }

       friend ostream& operator<<(ostream& consola, const Utilaje& utilaje) {
           cout << "Nume: " << utilaje.nume << "\nNumar kilometri: " << utilaje.nr_kilometri << "\nMarca: " << utilaje.marca << "\nCapacitate motor: " << utilaje.capacitate_motor << "\nKilometri parcursi pe luna: ";
           for (int i = 0; i < utilaje.nr_kilometri - 1; i++) {
               cout << utilaje.pieseSchimb[i] << ", ";
           }

           cout << utilaje.pieseSchimb[utilaje.nr_kilometri - 1] << endl;
           return consola;
       }

       friend void afisareFriend(const Utilaje& utilaje);
         void scrieInFisierText(const string& numeFisier) const {
        ofstream fout(numeFisier);
        if (!fout.is_open()) {
            cerr << "Eroare la deschiderea fisierului text\n";
            return;
        }

        fout << "Nume: " << nume << "\nNumar kilometri: " << nr_kilometri << "\nPiese de schimb: ";
        for (int i = 0; i < nr_kilometri - 1; i++) {
            fout << pieseSchimb[i] << " , ";
        }
        fout << pieseSchimb[nr_kilometri - 1] << endl;

        fout.close();
    }

    void citesteDinFisierText(const string& numeFisier) {
        ifstream fin(numeFisier);
        if (!fin.is_open()) {
            cerr << "Eroare la deschiderea fisierului text\n";
            return;
        }

        fin.ignore(numeric_limits<streamsize>::max(), '\n'); 
        fin >> nume >> nr_kilometri;
        delete[] pieseSchimb;
        pieseSchimb = new int[nr_kilometri];
        for (int i = 0; i < nr_kilometri; i++) {
            fin >> pieseSchimb[i];
        }

        fin.close();
    }

    void scrieInFisierBinar(const string& numeFisier) const {
        ofstream fout(numeFisier, ios::binary | ios::trunc);
        if (!fout.is_open()) {
            cerr << "Eroare la deschiderea fisierului binar\n";
            return;
        }

        fout.write(reinterpret_cast<const char*>(this), sizeof(*this));

        fout.close();
    }

    void citesteDinFisierBinar(const string& numeFisier) {
        ifstream fin(numeFisier, ios::binary);
        if (!fin.is_open()) {
            cerr << "Eroare la deschiderea fisierului binar\n";
            return;
        }

        fin.read(reinterpret_cast<char*>(this), sizeof(*this));

        fin.close();
    }
};

void afisareFriend(const Utilaje& utilaje) {
    cout << "Functie prietena pentru Utilaje: " << utilaje.nume << ", " << utilaje.nr_kilometri << endl;
}



string Utilaje::marca = "Utilitas";

class Terenuri {
private:
string teren;
    int numar_teren;
    int pretEvaluat;
    static int kilometri;
    const string localitate;
    int* pretInitial;
public:
 string getTerenuri() {
        return this->teren;
    }

    void setTerem() {
        if (teren.length() > 3) {
            this->teren= teren;
        }
    }
    Terenuri() : localitate("Urlati") {
        this->numar_teren = 1;
        this->pretEvaluat = 2;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = 1 + i;
        }
    }

    Terenuri(int numar_teren, int pretEvaluat, const string localitate, int* pretInitial) : localitate("Satu Nou") {
        this->numar_teren = numar_teren;
        this->pretEvaluat = pretEvaluat;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = pretInitial[i];
        }
    }
 Terenuri(const Terenuri &terenuri) : localitate(terenuri.localitate) {
        this->numar_teren = terenuri.numar_teren;
        this->pretEvaluat = terenuri.pretEvaluat;
        this->pretInitial = new int[this->pretEvaluat];
        for (int i = 0; i < this->pretEvaluat; i++) {
            this->pretInitial[i] = terenuri.pretInitial[i];
        }
    }

    ~Terenuri() {
        if (this->pretInitial != NULL) {
            delete[] this->pretInitial;
            this->pretInitial = NULL;
        }
    }

    void afisare_terenuri() {
        cout << "Numarul terenului: " << this->numar_teren << "\nPret evaluat: " << this->pretEvaluat << "\nKilometri: " << this->kilometri << "\nLocalitate: " << this->localitate << "\nPret initial: ";
        for (int i = 0; i < this->pretEvaluat -2; i++) {
            cout << this->pretInitial[i] << " , ";
        }
        cout << this->pretInitial[this->pretEvaluat - 1] << endl;
    }

    static void setKilometri(int Kilometrinoi) {
        kilometri = Kilometrinoi;
    }
      friend void prelucrareTerenuri(const Terenuri& terenuri);

      Terenuri& operator=(const Terenuri& terenuri) {
          if (this != &terenuri) {
              this->numar_teren = terenuri.numar_teren;
              this->pretEvaluat = terenuri.pretEvaluat;
              if (this->pretInitial != nullptr) {
                  delete[] this->pretInitial;
              }
              this->pretInitial = new int[this->pretEvaluat];
              for (int i = 0; i < this->pretEvaluat; i++) {
                  this->pretInitial[i] = terenuri.pretInitial[i];
              }
          }
          return *this;
      }

      Terenuri operator+(const Terenuri& terenuri) const {
          Terenuri rezultat = *this;
          for (int i = 0; i < this->pretEvaluat; i++) {
              rezultat.pretInitial[i] += terenuri.pretInitial[i];
          }
          return rezultat;
      }

      Terenuri operator-(const Terenuri& terenuri) const {
          Terenuri rezultat = *this;
          for (int i = 0; i < this->pretEvaluat; i++) {
              rezultat.pretInitial[i] -= terenuri.pretInitial[i];
          }
          return rezultat;
      }

      Terenuri operator*(int scalar) const {
          Terenuri result = *this;
          for (int i = 0; i < this->pretEvaluat; i++) {
              result.pretInitial[i] *= scalar;
          }
          return result;
      }

      Terenuri operator/(int divizor) const {
          if (divizor != 0) {
              Terenuri rezultat = *this;
              for (int i = 0; i < this->pretEvaluat; i++) {
                  rezultat.pretInitial[i] /= divizor;
              }
              return rezultat;
          }
          else {
              cerr << "Eroare" << endl;
              exit(EXIT_FAILURE);
          }
      }

      bool operator==(const Terenuri& terenuri) const {
          return this->pretEvaluat == terenuri.pretEvaluat;
      }

      bool operator!=(const Terenuri& terenuri) const {
          return this->pretEvaluat != terenuri.pretEvaluat;
      }

      Terenuri& operator++() {
          for (int i = 0; i < this->pretEvaluat; i++) {
              this->pretInitial[i]++;
          }
          return *this;
      }

      Terenuri operator++(int) {
          Terenuri temp = *this;
          ++(*this);
          return temp;
      }

      Terenuri& operator+=(const Terenuri& terenuri) {
          for (int i = 0; i < this->pretEvaluat; i++) {
              this->pretInitial[i] += terenuri.pretInitial[i];
          }
          return *this;
      }

      friend ostream& operator<<(ostream& consola, const Terenuri& terenuri) {
          cout << "Numarul terenului: " << terenuri.numar_teren << "\nPret evaluat: " << terenuri.pretEvaluat << "\nKilometri: " << terenuri.kilometri << "\nLocalitate: " << terenuri.localitate << "\nPret initial: ";
          for (int i = 0; i < terenuri.pretEvaluat - 2; i++) {
              cout << terenuri.pretInitial[i] << " , ";
          }
          cout << terenuri.pretInitial[terenuri.pretEvaluat - 1] << endl;
          return consola;
      }

      friend void afisareFriend(const Terenuri& terenuri);
};

void afisareFriend(const Terenuri& terenuri) {
    cout << "Functie prietena pentru Terenuri: " << terenuri.numar_teren << ", " << terenuri.pretEvaluat << endl;
}


void prelucrareAnimale(const Animale& animale) {
   
    cout << "Animale: " << animale.specie << ", " << animale.numar << endl;
}


void prelucrareUtilaje(const Utilaje& utilaje) {
 
    cout << " Utilaje: " << utilaje.nume << ", " << utilaje.nr_kilometri << endl;
}
void prelucrareTerenuri(const Terenuri& terenuri) {
    cout << "Terenuri" << terenuri.numar_teren << " , " << terenuri.pretEvaluat << endl;
}

int Terenuri::kilometri = 25;

class Ferma {
private:
    static const int Max_animale = 1;
    static const int Max_kilometri = 1;

    Animale* animale[Max_animale];
    Utilaje* utilaje[Max_kilometri];

    int numarAnimale;
    int numarUtilaje;

public:
    Ferma() : numarAnimale(0), numarUtilaje(0) {}

    void adaugaAnimal(const Animale& animal) {
        if (numarAnimale < Max_animale) {
            animale[numarAnimale++] = new Animale(animal);
        } else {
            std::cerr << "Numarul maxim " << std::endl;
        }
    }

    void adaugaUtilaj(const Utilaje& utilaj) {
        if (numarUtilaje < Max_kilometri) {
            utilaje[numarUtilaje++] = new Utilaje(utilaj);
        } else {
            std::cerr << "Numarul maxim " << std::endl;
        }
    }

    void afisareFerma() {
        std::cout << "Animale ferma:\n";
        for (int i = 0; i < numarAnimale; ++i) {
            std::cout << "Specie: " << animale[i]->getSpecie() << ", Numar: " << animale[i]->getNumar() << std::endl;
        }

        std::cout << "\nKilometri parcursi:\n";
        for (int i = 0; i < numarUtilaje; ++i) {
            std::cout << "Tip: " << utilaje[i]->getNume() << ", Numar: " << utilaje[i]->getNr_kilometri() << std::endl;
        }
    }

    ~Ferma() {
        for (int i = 0; i < numarAnimale; ++i) {
            delete animale[i];
        }

        for (int i = 0; i < numarUtilaje; ++i) {
            delete utilaje[i];
        }
    }
};

void main() {
    
    Animale a1;
   

    Animale a2("Porci", 2, 1234, new int[2] {5, 7});
 

    Animale a3("Cai", 2, 5678, new int[2] {8, 10});
    cout << "Animale 3:\n" << a3;

    Animale a4;
    a4 = a2 + a3;
    cout << a4;

    Animale a5;
    a5 = a3 - a2;
    cout << a5;

    Animale a6;
    a6 = a3 * 2;
    cout <<  a6;

    Animale a7;
    a7 = a3 / 2;
    cout << a7;

    if (a2 == a3) {
        cout << "a2 egal cu  a3\n";
    }
    else {
        cout << "a2 nu e egal cu a3\n";
    }

    if (a1 != a2) {
        cout << "a1 nu e egal cu a2\n";
    }
    else {
        cout << "a1 nu e egal cu a2\n";
    }

    ++a3;
    cout  << a3;

    a4++;
    cout << a4;

    Utilaje u1;
    prelucrareUtilaje(u1);

    Utilaje u2("Combinezon", 2, 6, new int[3] {18, 19, 20});
    prelucrareUtilaje(u2);

    Utilaje u3("Buldozer", 3, 8, new int[3] {21, 22, 23});
    cout << "Utilaje 3:\n" << u3;

    Utilaje u4;
    u4 = u2 + u3;
    cout << u4;

    Utilaje u5;
    u5 = u3 - u2;
    cout <<  u5;

    Utilaje u6;
    u6 = u3 * 2;
    cout <<  u6;

    Utilaje u7;
    u7 = u3 / 2;
    cout << u7;

    if (u2 == u3) {
        cout << "u2 egal cu u3\n";
    }
    else {
        cout << "u2 nu e egal cu u3\n";
    }

    if (u1 != u2) {
        cout << "u1 nu e egal cu u2\n";
    }
    else {
        cout << "u1 nu e egal cu u2\n";
    }

    Terenuri t1;
    cout << "Terenuri 1:\n" << t1;

    Terenuri t2(2, 2, "Brasov", new int[2] {15, 16});
    cout << "Terenuri 2:\n" << t2;

    Terenuri t3(3, 3, "Timisoara", new int[3] {25, 26, 27});
    cout << "Terenuri 3:\n" << t3;

    Terenuri t4;
    t4 = t2 + t3;
    cout <<  t4;

    Terenuri t5;
    t5 = t3 - t2;
    cout << t5;

    if (t2 == t3) {
        cout << "t2 egal cu t3\n";
    }
    else {
        cout << "t2 nu e egal cu t3\n";
    }

    if (t1 != t2) {
        cout << "t1 nu e egal cu t2\n";
    }
    else {
        cout << "t1 egal cu t2\n";
    }

    Terenuri t6 = ++t2;
    cout <<  t6;

    Terenuri t7 = t3++;
    cout  << t7;

    Terenuri::setKilometri(30);

    cout << t2;

    prelucrareTerenuri(t2);


    Ferma ferma;
    ferma.adaugaAnimal(a1);
    ferma.adaugaAnimal(a2);
    ferma.adaugaUtilaj(u1);
    ferma.adaugaUtilaj(u2);

    ferma.afisareFerma();

    cout << "Animale :\n" << a1 << endl;
    cout << "Utilaj :\n" << u1 << endl;
    a1.scrieInFisierText("animal.txt");
    u1.scrieInFisierText("utilaj.txt");


  
  

    a2.citesteDinFisierText("animal.txt");
    u2.citesteDinFisierText("utilaj.txt");

   

 
    cout << "Animale 2 dupa citire:\n" << a2 << endl;
    cout << "Utilaj 2 dupa citire:\n" << u2 << endl;

    afisareFriend(a1);
    afisareFriend(u1);

}


